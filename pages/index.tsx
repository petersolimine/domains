import { Toaster, toast } from "react-hot-toast";
import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import ListItem from "../components/ListItem";
import React, { useState } from "react";

import godaddy from "../images/godaddy.png";
import namesilo from "../images/namesilo.png";
import namecheap from "../images/namecheap.png";
import Footer from "../components/Footer";

const inter = Inter({ subsets: ["latin"] });

const prompt_prefix = "";
const prompt_postfix = "";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [prompt, setPrompt] = useState("");
  const [generatedDomains, setGeneratedDomains] = useState("");
  const domainData = [
    {
      domain: "example.com",
      price: 12.99,
      purchaseOptions: [
        {
          site: "NameSilo",
          price: 12.99,
          logo: namesilo,
          url: "https://www.namesilo.com/domain/search-domains?query={domain}",
        },
        {
          site: "GoDaddy",
          price: 13.99,
          logo: godaddy,
          url: "https://www.godaddy.com/domains/domain-name-search?checkAvail=1&tmskey=&domainToCheck={domain}",
        },
        {
          site: "NameCheap",
          price: 1.99,
          logo: namecheap,
          url: "https://www.namecheap.com/domains/registration/results/?domain=cannibal{domain}",
        },
      ],
    },
    {
      domain: "example.com",
      price: 12.99,
      purchaseOptions: [
        {
          site: "NameSilo",
          price: 12.99,
          logo: namesilo,
          url: "https://www.namesilo.com/domain/search-domains?query={domain}",
        },
        {
          site: "GoDaddy",
          price: 13.99,
          logo: godaddy,
          url: "https://www.godaddy.com/domains/domain-name-search?checkAvail=1&tmskey=&domainToCheck={domain}",
        },
      ],
    },
    {
      domain: "example.com",
      price: 12.99,
      purchaseOptions: [
        {
          site: "NameSilo",
          price: 12.99,
          logo: namesilo,
          url: "https://www.namesilo.com/domain/search-domains?query={domain}",
        },
        {
          site: "GoDaddy",
          price: 13.99,
          logo: godaddy,
          url: "https://www.godaddy.com/domains/domain-name-search?checkAvail=1&tmskey=&domainToCheck={domain}",
        },
      ],
    },
    {
      domain: "example.com",
      price: 12.99,
      purchaseOptions: [
        {
          site: "NameSilo",
          price: 12.99,
          logo: namesilo,
          url: "https://www.namesilo.com/domain/search-domains?query={domain}",
        },
        {
          site: "GoDaddy",
          price: 13.99,
          logo: godaddy,
          url: "https://www.godaddy.com/domains/domain-name-search?checkAvail=1&tmskey=&domainToCheck={domain}",
        },
      ],
    },
  ];

  const generateAnswer = async (e: any) => {
    e.preventDefault();
    setLoading(true);
    if (prompt.length < 4) {
      toast.error("Your prompt is too short. ðŸ˜¢");
      setLoading(false);
      return;
    }
    const response = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt: prompt_prefix + prompt.trim() + prompt_postfix,
      }),
    });
    if (!response.ok) {
      console.error(response.statusText);
      toast.error(`Something went wrong. ðŸ˜¢ ${response.status}`);
    }

    // This data is a ReadableStream
    const data = response.body;
    if (!data) {
      setLoading(false);
      return;
    }

    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);
      setGeneratedDomains((prev) => prev + chunkValue);
    }

    setLoading(false);
  };

  return (
    <>
      <Head>
        <title>Domain Search Tool | DomainGarden</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/search.svg" />
      </Head>
      <div className="bg-gradient-to-r from-cyan-100 to-blue-200 bg-opacity-100 min-h-screen">
        <div className="min-h-screen flex justify-center items-center flex-col">
          <div className="flex flex-row items-center space-x-3">
            <Image src="/search.svg" alt="Search" width={90} height={90} />
            <Image src="/robot.svg" alt="Robot" width={100} height={100} />
          </div>
          <h1 className="text-4xl font-extrabold m-4">Domain Name Finder</h1>
          {/* <div className="flex mt-10 items-center space-x-3"> */}
          <p className="self-start font-medium mx-auto sm:w-full max-w-screen-lg">
            Describe your product or company{" "}
            <span className="text-slate-400">(two to four sentences).</span>
          </p>
          <div className="flex flex-col md:flex-row items-stretch md:items-center mx-auto my-2 w-full max-w-screen-lg gap-4 sm:p-0">
            <div className="relative w-full mb-4">
              <textarea
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
                rows={4}
                className="flex-1 md:min-h-[2.5rem] rounded-md border-gray-200 shadow-lg focus:border-black focus:ring-black my-2 resize-none w-full"
                placeholder={
                  "A tool that makes searching for domain names 10x easier by finding available domain names using the ChatGPT API."
                }
              ></textarea>
              <button
                className="absolute -bottom-4 right-0 text-blue-400 underline cursor-pointer text-sm font-medium"
                onClick={() => {
                  // Show advanced settings
                }}
              >
                Show Advanced
              </button>
            </div>
            <button
              className="bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 rounded-xl shadow-lg text-white font-medium py-2 px-4 md:py-8 mb-6"
              onClick={(e) => {
                generateAnswer(e);
              }}
            >
              Find Domains &rarr;
            </button>
          </div>

          <div className="container mx-auto">
            {domainData.map((data, index) => (
              <ListItem
                key={index}
                domain={data.domain}
                price={data.price}
                purchaseOptions={data.purchaseOptions}
              />
            ))}
          </div>
        </div>
        <Footer />
        <Toaster
          position="top-center"
          reverseOrder={false}
          toastOptions={{ duration: 2000 }}
        />
      </div>
    </>
  );
}
